# https://github.com/aaronbates/dotfiles/blob/master/git/.gitconfig

[alias]
	# git add with cherry pick
	ap = "!git add -p"

	# Print git log in a pretty way
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# view short status
	s = status -s
	
	# Semantic commit messages
  	# credit: https://github.com/fteem/git-semantic-commits
  	c-build = "!f() { if [ -z \"$1\"  ]; then git commit -m \"build: \" -e; elif [ -z \"$2\" ]; then git commit -m \"build: $1\"; else git commit -m \"build($1): $2\"; fi }; f"
  	c-chore = "!f() { if [ -z \"$1\"  ]; then git commit -m \"chore: \" -e; elif [ -z \"$2\" ]; then git commit -m \"chore: $1\"; else git commit -m \"chore($1): $2\"; fi }; f"
  	c-ci = "!f() { if [ -z \"$1\"  ]; then git commit -m \"ci: \" -e; elif [ -z \"$2\" ]; then git commit -m \"ci: $1\"; else git commit -m \"ci($1): $2\"; fi }; f"
  	c-docs = "!f() { if [ -z \"$1\"  ]; then git commit -m \"docs: \" -e; elif [ -z \"$2\" ]; then git commit -m \"docs: $1\"; else git commit -m \"docs($1): $2\"; fi }; f"
  	c-feat = "!f() { if [ -z \"$1\"  ]; then git commit -m \"feat: \" -e; elif [ -z \"$2\" ]; then git commit -m \"feat: $1\"; else git commit -m \"feat($1): $2\"; fi }; f"
  	c-fix = "!f() { if [ -z \"$1\"  ]; then git commit -m \"fix: \" -e; elif [ -z \"$2\" ]; then git commit -m \"fix: $1\"; else git commit -m \"fix($1): $2\"; fi }; f"
  	c-localize = "!f() { if [ -z \"$1\"  ]; then git commit -m \"localize: \" -e; elif [ -z \"$2\" ]; then git commit -m \"localize: $1\"; else git commit -m \"localize($1): $2\"; fi }; f"
  	c-perf = "!f() { if [ -z \"$1\"  ]; then git commit -m \"perf: \" -e; elif [ -z \"$2\" ]; then git commit -m \"perf: $1\"; else git commit -m \"perf($1): $2\"; fi }; f"
  	c-refactor = "!f() { if [ -z \"$1\"  ]; then git commit -m \"refactor: \" -e; elif [ -z \"$2\" ]; then git commit -m \"refactor: $1\"; else git commit -m \"refactor($1): $2\"; fi }; f"
  	c-revert = "!f() { if [ -z \"$1\"  ]; then git commit -m \"revert: \" -e; elif [ -z \"$2\" ]; then git commit -m \"revert: $1\"; else git commit -m \"revert($1): $2\"; fi }; f"
  	c-style = "!f() { if [ -z \"$1\"  ]; then git commit -m \"style: \" -e; elif [ -z \"$2\" ]; then git commit -m \"style: $1\"; else git commit -m \"style($1): $2\"; fi }; f"
  	c-test = "!f() { if [ -z \"$1\"  ]; then git commit -m \"test: \" -e; elif [ -z \"$2\" ]; then git commit -m \"test: $1\"; else git commit -m \"test($1): $2\"; fi }; f"
  	c-ux = "!f() { if [ -z \"$1\"  ]; then git commit -m \"ux: \" -e; elif [ -z \"$2\" ]; then git commit -m \"ux: $1\"; else git commit -m \"ux($1): $2\"; fi }; f"
  	
	c-semantic = "!f() { echo \"build, chore, ci, docs, feat, fix, localize, perf, refactor, revert, style, test, ux\"; }; f"

[color]
  	# Use colors in Git commands that are capable of colored output when
  	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
  	ui = auto

[color "branch"]
  	current = yellow reverse
  	local = yellow
  	remote = green

[color "diff"]
  	meta = yellow bold
  	frag = magenta bold # line info
  	old = red # deletions
  	new = green # additions

[color "status"]
  	added = green
  	changed = yellow
	untracked = red
